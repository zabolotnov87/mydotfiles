snippet envf "ENV.fetch('...', '...')"
ENV.fetch('${1}', ${2})
endsnippet

snippet re "require ..."
require '${1:ruby_file}'
endsnippet

snippet class "class <class_name> def initialize ... end end"
class ${1:`!p snip.rv = snip.basename.title().replace('_', '')`}
	def initialize(${2:args})
		${3:body}
	end
end
endsnippet

snippet module "module"
module ${1:`!p snip.rv = snip.basename.title().replace('_', '')`}
	${0:body}
end
endsnippet

snippet d "def <name>..."
def ${1:method}${2:(${3:args})}
	$4
end
endsnippet

snippet pry "require 'pry'; binding.pry"
require 'pry'; ::Kernel.binding.pry
endsnippet

snippet irb "binding.irb"
binding.irb
endsnippet

snippet selfc "class << self"
class << self
	${1:# body}
end
endsnippet

snippet do "do..end"
do |${1:*args}|
	${2:# body}
end
endsnippet

snippet priv "private "
private

$0
endsnippet

snippet todo "TODO: "
TODO: $0
endsnippet

snippet sig "sig { params(...).returns(...) }"
sig { ${1:params${2:($3).}}${4:returns($5)} }$7
endsnippet

snippet fr "frozen_string_literal: true"
# frozen_string_literal: true
$0
endsnippet

snippet st "typed: true"
# typed: true
$0
endsnippet
