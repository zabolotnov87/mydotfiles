snippet envf ENV.fetch
	ENV.fetch('${1}', ${2})

# snippet re "require ..."
# require '${1:ruby_file}'
# endsnippet

# snippet cl "class MyClass ..."
# class ${1:`!p snip.rv = snip.basename.title().replace('_', '')`} ${2:< $3}
# 	$0
# end
# endsnippet

# snippet mo "module"
# module ${1:`!p snip.rv = snip.basename.title().replace('_', '')`}
# 	${0:body}
# end
# endsnippet

# snippet d "def <name>..."
# def ${1:method}${2:(${3:args})}
# 	$4
# end
# endsnippet

snippet pry binding.pry
	require 'pry'; ::Kernel.binding.pry

# snippet irb "binding.irb"
# binding.irb
# endsnippet

# snippet selfc "class << self"
# class << self
# 	${1:# body}
# end
# endsnippet

# snippet do "do..end"
# do |${1:*args}|
# 	${2:# body}
# end
# endsnippet

# snippet priv "private "
# private

# $0
# endsnippet

# snippet todo "TODO: "
# TODO: $0
# endsnippet

# snippet sig "sig { params(...).returns(...) }"
# sig { ${1:params${2:($3).}}${4:returns($5)} }$7
# endsnippet

# snippet fr "frozen_string_literal: true"
# # frozen_string_literal: true
# $0
# endsnippet

# snippet st "typed: true"
# # typed: true
# $0
# endsnippet

# snippet rspec "describe ..."
# require '${1:rails_helper}'

# describe ${2:SomeClass} do
# 	${3:# body}
# end
# endsnippet

# snippet des "describe ..."
# describe '${1:description}' do
# 	${2:# body}
# end
# endsnippet

# snippet con "context ..."
# context '${1:description}' do
# 	${2:# body}
# end
# endsnippet

# snippet it "it ..."
# it '${1:description}' do
# 	${2:# body}
# end
# endsnippet

# snippet l "let(:name) { ... }"
# let(:${1}) { ${2} }
# endsnippet

# snippet ld "let(:name) do ..."
# let(:${1}) do
# 	${2:# body}
# end
# endsnippet

# snippet su "subject(:name) { ... }"
# subject(:${1}) { ${2} }
# endsnippet

# snippet dc "described_class" i
# described_class
# endsnippet

# snippet is "it { is_expected.to eq ... }"
# it { is_expected.to eq ${1} }
# endsnippet

# snippet its "it { expect(...).to eq ... }"
# it { expect(${1}).to eq ${2} }
# endsnippet

# snippet be "before do ..."
# before do
# 	${1:# body}
# end
# endsnippet

# snippet sh "shared_examples '...'"
# shared_examples '${1}' do
# 	${2:# body}
# end
# endsnippet

# snippet itbl "it_behaves_like '...'"
# it_behaves_like '${1}'
# endsnippet
